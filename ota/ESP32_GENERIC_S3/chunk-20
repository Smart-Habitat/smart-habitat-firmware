mode is not supported when both MOSI and MISO phases are enabled.[0m
 [0;31mE (%lu) %s: %s(%d): trans tx_buffer should be NULL and SPI_TRANS_USE_TXDATA should be cleared to skip MOSI phase.[0m
 [0;31mE (%lu) %s: %s(%d): trans rx_buffer should be NULL and SPI_TRANS_USE_RXDATA should be cleared to skip MISO phase.[0m
 [0;31mE (%lu) %s: %s(%d): Dummy phase is not available when both data out and in are enabled[0m
 [0;31mE (%lu) %s: %s(%d): txdata transfer > hardware max supported len[0m
 [0;31mE (%lu) %s: %s(%d): rxdata transfer > hardware max supported len[0m
 [0;31mE (%lu) %s: %s(%d): Set flag SPI_TRANS_DMA_BUFFER_ALIGN_MANUAL but TX buffer addr&len not align to %d, or not dma_capable[0m
 [0;31mE (%lu) %s: %s(%d): Set flag SPI_TRANS_DMA_BUFFER_ALIGN_MANUAL but RX buffer addr&len not align to %d, or not dma_capable[0m
 [0;31mE (%lu) %s: %s(%d): acquire finite time not supported now.[0m
 [0;31mE (%lu) %s: %s(%d): Cannot acquire bus when a polling transaction is in progress.[0m
 [0;31mE (%lu) %s: Cannot release bus when a polling transaction is in progress.[0m
 [0;31mE (%lu) %s: %s(%d): currently timeout is not available for polling transactions[0m
 [0;31mE (%lu) %s: %s(%d): Cannot send polling transaction while the previous polling transaction is not terminated.[0m
 [0;31mE (%lu) %s: polling can't get buslock[0m
 [0;31mE (%lu) %s: %s(%d): host_id not in use[0m
 [0;31mE (%lu) %s: %s(%d): not all CSses freed[0m
 [0;31mE (%lu) %s: %s(%d): invalid host[0m
 [0;31mE (%lu) %s: %s(%d): host_id not initialized[0m
 [0;31mE (%lu) %s: %s(%d): SPI Master cannot attach to bus. (Check CONFIG_SPI_FLASH_SHARE_SPI1_BUS)[0m
 [0;31mE (%lu) %s: %s(%d): invalid core id[0m
 [0;31mE (%lu) %s: %s(%d): spics pin invalid[0m
 [0;31mE (%lu) %s: %s(%d): invalid sclk speed[0m
 [0;31mE (%lu) %s: %s(%d): use feature flag 'SPI_DEVICE_NO_RETURN_RESULT' but no post callback function sets[0m
 [0;31mE (%lu) %s: %s(%d): no free cs pins for the host[0m
 [0;31mE (%lu) %s: %s(%d): assigned clock speed not supported[0m
 [0;31mE (%lu) %s: %s(%d): Have unfinished transactions[0m
 [0;31mE (%lu) %s: %s(%d): Cannot queue new transaction while previous polling transaction is not terminated.[0m
 [0;31mE (%lu) %s: %s(%d): API not Supported![0m
 sdspi_host [0;31mE (%lu) %s: gpio_config (interrupt) failed with rc=0x%x[0m
 [0;31mE (%lu) %s: gpio_isr_handle_add failed with rc=0x%x[0m
 [0;33mW (%lu) %s: %s: card write protected[0m
 [0;31mE (%lu) %s: data CRC failed, got=0x%04x expected=0x%04x[0m
 sdspi_transaction [0;32mI (%lu) %s: cmd=%d, R1 response not found[0m
 [0;32mI (%lu) %s: cmd=%d, R1 response: command CRC error[0m
 [0;32mI (%lu) %s: cmd=%d, R1 response: command not supported[0m
 [0;32mI (%lu) %s: cmd=%d, R1 response: size error[0m
 [0;32mI (%lu) %s: cmd=%d, R1 response: function number error[0m
 [0;32mI (%lu) %s: cmd=%d, R1 response: unexpected value 0x%02x[0m
 temperature_sensor [0;31mE (%lu) %s: %s(%d): tsens not in init state[0m
 [0;31mE (%lu) %s: %s(%d): Invalid argument[0m
 [0;31mE (%lu) %s: %s(%d): Already installed[0m
 [0;31mE (%lu) %s: %s(%d): no mem for temp sensor[0m
 [0;31mE (%lu) %s: %s(%d): No space for s_tsens_attribute_copy[0m
 [0;31mE (%lu) %s: %s(%d): Table sort failed[0m
 [0;31mE (%lu) %s: %s(%d): Out of testing range[0m
 [0;31mE (%lu) %s: %s(%d): Cannot select the correct range[0m
 [0;32mI (%lu) %s: Range [%d°C ~ %d°C], error < %d°C[0m
 [0;31mE (%lu) %s: %s(%d): tsens not enabled yet[0m
 [0;31mE (%lu) %s: %s(%d): Has not been installed[0m
 [0;31mE (%lu) %s: %s(%d): Celsius points to nothing[0m
 [0;33mW (%lu) %s: Calibration failed[0m
 [0;31mE (%lu) %s: Exceeding temperature measure range.[0m
 TOUCH_SENSOR touch refh error touch refl error touch atten error Touch channel error touch slope error touch opt error TOUCH0 is internal denoise channel touch fsm mode error [0;31mE (%lu) %s: %s(%d): intr_mask parameter error[0m
 [0;31mE (%lu) %s: %s(%d): intr mask error[0m
 [0;31mE (%lu) %s: %s(%d): Touch channel error[0m
 [0;31mE (%lu) %s: %s(%d): 