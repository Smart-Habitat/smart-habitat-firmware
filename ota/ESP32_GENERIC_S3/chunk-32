dGhSU0FFbmNyeXB0aW9uAFJTQSB3aXRoIFNIQS01MTIAKw4DAh0AKoZIzj0EAQBlY2RzYS13aXRoLVNIQTEARUNEU0Egd2l0aCBTSEExACqGSM49BAMBAGVjZHNhLXdpdGgtU0hBMjI0AEVDRFNBIHdpdGggU0hBMjI0ACqGSM49BAMCAGVjZHNhLXdpdGgtU0hBMjU2AEVDRFNBIHdpdGggU0hBMjU2ACqGSM49BAMDAGVjZHNhLXdpdGgtU0hBMzg0AEVDRFNBIHdpdGggU0hBMzg0ACqGSM49BAMEAGVjZHNhLXdpdGgtU0hBNTEyAEVDRFNBIHdpdGggU0hBNTEyACqGSIb3DQEBCgBSU0FTU0EtUFNTAGFueVBvbGljeQBBbnkgUG9saWN5AGlkLWtwLXNlcnZlckF1dGgAVExTIFdlYiBTZXJ2ZXIgQXV0aGVudGljYXRpb24AaWQta3AtY2xpZW50QXV0aABUTFMgV2ViIENsaWVudCBBdXRoZW50aWNhdGlvbgArBgEFBQcDAwBpZC1rcC1jb2RlU2lnbmluZwBDb2RlIFNpZ25pbmcAKwYBBQUHAwQAaWQta3AtZW1haWxQcm90ZWN0aW9uAEUtbWFpbCBQcm90ZWN0aW9uACsGAQUFBwMIAGlkLWtwLXRpbWVTdGFtcGluZwBUaW1lIFN0YW1waW5nACsGAQUFBwMJAGlkLWtwLU9DU1BTaWduaW5nAE9DU1AgU2lnbmluZwArBgEEAYLkJQEAaWQta3Atd2lzdW4tZmFuLWRldmljZQBXaS1TVU4gQWxsaWFuY2UgRmllbGQgQXJlYSBOZXR3b3JrIChGQU4pAFUdEwBpZC1jZS1iYXNpY0NvbnN0cmFpbnRzAEJhc2ljIENvbnN0cmFpbnRzAFUdDwBpZC1jZS1rZXlVc2FnZQBVHSUAaWQtY2UtZXh0S2V5VXNhZ2UARXh0ZW5kZWQgS2V5IFVzYWdlAFUdEQBpZC1jZS1zdWJqZWN0QWx0TmFtZQBTdWJqZWN0IEFsdCBOYW1lAGCGSAGG+EIBAQBpZC1uZXRzY2FwZS1jZXJ0dHlwZQBOZXRzY2FwZSBDZXJ0aWZpY2F0ZSBUeXBlAFUdIABpZC1jZS1jZXJ0aWZpY2F0ZVBvbGljaWVzAENlcnRpZmljYXRlIFBvbGljaWVzAFUdDgBpZC1jZS1zdWJqZWN0S2V5SWRlbnRpZmllcgBTdWJqZWN0IEtleSBJZGVudGlmaWVyAFUdIwBpZC1jZS1hdXRob3JpdHlLZXlJZGVudGlmaWVyAEF1dGhvcml0eSBLZXkgSWRlbnRpZmllcgBVBAMAaWQtYXQtY29tbW9uTmFtZQBDb21tb24gTmFtZQBVBAYAaWQtYXQtY291bnRyeU5hbWUAQ291bnRyeQBVBAcAaWQtYXQtbG9jYWxpdHkATG9jYWxpdHkAVQQIAGlkLWF0LXN0YXRlAFN0YXRlAFUECgBpZC1hdC1vcmdhbml6YXRpb25OYW1lAE9yZ2FuaXphdGlvbgBVBAsAaWQtYXQtb3JnYW5pemF0aW9uYWxVbml0TmFtZQBPcmcgVW5pdABPVQAqhkiG9w0BCQEAZW1haWxBZGRyZXNzAEUtbWFpbCBhZGRyZXNzAFUEBQBpZC1hdC1zZXJpYWxOdW1iZXIAU2VyaWFsIG51bWJlcgBVBBAAaWQtYXQtcG9zdGFsQWRkcmVzcwBQb3N0YWwgYWRkcmVzcwBVBBEAaWQtYXQtcG9zdGFsQ29kZQBQb3N0YWwgY29kZQBVBAQAaWQtYXQtc3VyTmFtZQBTdXJuYW1lAFNOAFUEKgBpZC1hdC1naXZlbk5hbWUAR2l2ZW4gbmFtZQBHTgBVBCsAaWQtYXQtaW5pdGlhbHMASW5pdGlhbHMAVQQsAGlkLWF0LWdlbmVyYXRpb25RdWFsaWZpZXIAR2VuZXJhdGlvbiBxdWFsaWZpZXIAVQQMAGlkLWF0LXRpdGxlAFRpdGxlAFUELgBpZC1hdC1kblF1YWxpZmllcgBEaXN0aW5ndWlzaGVkIE5hbWUgcXVhbGlmaWVyAFUEQQBpZC1hdC1wc2V1ZG9ueW0AUHNldWRvbnltAAmSJomT8ixkAQEAaWQtdWlkAFVzZXIgSWQACZImiZPyLGQBGQBpZC1kb21haW5Db21wb25lbnQARG9tYWluIGNvbXBvbmVudABVBC0AaWQtYXQtdW5pcXVlSWRlbnRpZmllcgBVbmlxdWUgSWRlbnRpZmllcgBQcm9jLVR5cGU6IDQsRU5DUllQVEVEAERFSy1JbmZvOiBBRVMtAERFSy1JbmZvOiBBRVMtMTI4LUNCQywAREVLLUluZm86IEFFUy0xOTItQ0JDLABERUstSW5mbzogQUVTLTI1Ni1DQkMsACqGSIb3DQEFDABjcnlwdG9fc2hhcmVkX2dkbWEAG1swOzMxbUUgKCVsdSkgJXM6IEZhaWxlZCB0byBhY3F1aXJlIERNQSBjaGFubmVsLCBFcnI9JWQbWzBtCgBlc3Bfc2hhABtbMDszMW1FICglbHUpICVzOiBTSEEgdHlwZSAlZCBub3Qgc3VwcG9ydGVkG1swbQoAG1swOzMxbUUgKCVsdSkgJXM6IEludmFsaWQgdCBmb3IgU0hBNTEyL3QsIHQgPSAldSxjYW5ub3QgYmUgMzg0G1swbQoAG1swOzMxbUUgKCVsdSkgJXM6IEludmFsaWQgdCBmb3IgU0hBNTEyL3QsIHQgPSAldSwgbXVzdCBlcXVhbCBvciBsZXNzIHRoYW4gNTEyG1swbQoAZXNwLXNoYQAbWzA7MzFtRSAoJWx1KSAlczogU0hBIERNQSBidWZfbGVuIGNhbm5vdCBleGNlZWQgbWF4IHNpemUgZm9yIGEgc2luZ2xlIGJsb2NrG1swbQoAG1swOzMxbUUgKCVsdSkgJXM6IEZhaWxlZCB0byBhbGxvY2F0ZSBidWYgbWVtb3J5G1swbQoAG1swOzMxbUUgKCVsdSkgJXM6IGVzcF9zaGFfZG1hX3N0YXJ0IGZhaWxlZCwgbm8gRE1BIGNoYW5uZWwgYXZhaWxhYmxlG1swbQoAJXMlcwoAJXNVbmtub3duIHJlYXNvbiAodGhpcyBzaG91bGQgbm90IGhhcHBlbikKAC0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQAtLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tAFRoZSBjZXJ0aWZpY2F0ZSB2YWxpZGl0eSBoYXMgZXhwaXJlZABUaGUgY2VydGlmaWNhdGUgaGFzIGJlZW4gcmV2b2tlZCAoaXMgb24gYSBDUkwpAFRoZSBjZXJ0aWZpY2F0ZSBDb21tb24gTmFtZSAoQ04pIGRvZXMgbm90IG1hdGNoIHdpdGggdGhlIGV4cGVjdGVkIENOAFRoZSBjZXJ0aWZpY2F0ZSBpcyBub3QgY29ycmVjdGx5IHNpZ25lZCBieSB0aGUgdHJ1c3RlZCBDQQBUaGUgQ1JMIGlzIG5vdCBjb3JyZWN0bHkgc2lnbmVkIGJ5IHRoZSB0cnVzdGVkIENBAFRoZSBDUkwgaXMgZXhwaXJlZABDZXJ0aWZpY2F0ZSB3YXMgbWlzc2luZwBDZXJ0aWZpY2F0ZSB2ZXJpZmljYXRpb24gd2FzIHNraXBwZWQAT3RoZXIgcmVhc29uIChjYW4gYmUgdXNlZCBieSB2ZXJpZnkgY2FsbGJhY2spAFRoZSBjZXJ0aWZpY2F0ZSB2YWxpZGl0eSBzdGFydHMgaW4gdGhlIGZ1dHVyZQBUaGUgQ1JMIGlzIGZyb20gdGhlIGZ1dHVyZQBVc2FnZSBkb2VzIG5vdCBtYXRjaCB0aGUga2V5VXNhZ2UgZXh0ZW5zaW9uAFVzYWdlIGRvZXMgbm90IG1hdGNoIHRoZSBleHRlbmRlZEtleVVzYWdlIGV4dGVuc2lvbgBVc2FnZSBkb2VzIG5vdCBtYXRjaCB0aGUgbnNDZXJ0VHlwZSBleHRlbnNpb24AVGhlIGNlcnRpZmljYXRlIGlzIHNpZ25lZCB3aXRoIGFuIHVuYWNjZXB0YWJsZSBoYXNoLgBUaGUgY2VydGlmaWNhdGUgaXMgc2lnbmVkIHdpdGggYW4gdW5hY2NlcHRhYmxlIFBLIGFsZyAoZWcgUlNBIHZzIEVDRFNBKS4AVGhlIGNlcnRpZmljYXRlIGlzIHNpZ25lZCB3aXRoIGFuIHVuYWNjZXB0YWJsZSBrZXkgKGVnIGJhZCBjdXJ2ZSwgUlNBIHRvbyBzaG9ydCkuAFRoZSBDUkwgaXMgc2lnbmVkIHdpdGggYW4gdW5hY2NlcHRhYmxlIGhhc2guAFRoZSBDUkwgaXMgc2lnbmVkIHdpdGggYW4gdW5hY2NlcHRhYmxlIFBLIGFsZyAoZWcgUlNBIHZzIEVDRFNBKS4AVGhlIENSTCBpcyBzaWduZWQgd2l0aCBhbiB1bmFjY2VwdGFibGUga2V5IChlZyBiYWQgY3VydmUsIFJTQSB0b28gc2hvcnQpLgAqhkiG9w0BAQgAKwYBBQUHCAQASW52YWxpZCBjb2V4aXN0IGFkYXB0ZXIgZnVuY3Rpb24gbWQ1LCBpbnRlcm5hbDogJXMsIGlkZjogJXMKAEludmFsaWQgY29leGlzdCBpMTU0IGV2ZW50IHR5cGUgZnVuY3Rpb24gbWQ1LCBpbnRlcm5hbDogJXMsIGlkZjogJXMKAGNvZXhpc3QgYWRhcHRlciBmdW5jdGlvbiBpcyBOVUxMAGNvZXhpc3QgYWRhcHRlciBmdW5jdGlvbiB2ZXJzaW9uIGVycm9yISBWZXJzaW9uICV4IGlzIGV4cGVjdGVkLCBidXQgaXQgaXMgJXgKAGNvZXhpc3QgYWRhcHRlciBmdW5jdGlvbiBtYWdpYyBlcnJvciEgTWFnaWMgJXggaXMgZXhwZWN0ZWQsIGJ1dCBpdCBpcyAleAoAY29leCBmaXJtd2FyZSB2ZXJzaW9uOiAlcwoAMDZlZTUyNwBkYjkyYmEzADc3Y2Q3ZjgAY29leGlzdCByb20gdmVyc2lvbiAlcwoARSAoJWQpICVzOiBlc3Agbm93IGNyZWF0ZSBtdXRleCBmYWlsIQoASSAoJWQpICVzOiBlc3Agbm93IGFscmVhZHkgaW5pdCEKAEkgKCVkKSAlczogZXNwIG5vdyBhbHJlYWR5IGRlaW5pdCEKAEUgKCVkKSAlczogZXNwIG5vdyBub3QgaW5pdCEKAEUgKCVkKSAlczogTWFsbG9jIHBlZXIgZmFpbAoARSAoJWQpICVzOiBpbnZhbGlkIHBhcmFtZXRlcgoARSAoJWQpICVzOiBpbnZhbGlkIGZvcm1hdCwgbmVlZCBjaGFuZ2UgcGh5IG1vZGUgdA==
