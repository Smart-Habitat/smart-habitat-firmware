ask [0;32mI (%lu) %s: Started on CPU%d[0m
 [0;31mE (%lu) %s: Could not reserve internal/DMA pool (error 0x%x)[0m
 [0;32mI (%lu) %s: Calling app_main()[0m
 [0;32mI (%lu) %s: Returned from app_main()[0m
 ***ERROR*** A stack overflow in task   has been detected. FreeRTOS [0;31mE (%lu) %s: Fatal error: TLSP deletion callback at index %d overwritten with non-excutable pointer %p[0m
 esp_timer [0;31mE (%lu) %s: Task is already initialized[0m
 [0;31mE (%lu) %s: Not enough memory to create timer task[0m
 [0;31mE (%lu) %s: ISR init failed[0m
 system_time [0;33mW (%lu) %s: Register shutdown handler failed, err = 0x%x[0m
 esp_timer_systimer [0;31mE (%lu) %s: timer ISR is already initialized[0m
 [0;31mE (%lu) %s: esp_intr_alloc failed (0x%x)[0m
 [0;31mE (%lu) %s: Can not enable ISR (0x%0x)[0m
 /dev/uart /0 /dev/secondary /1 /2 esp_psram [0;31mE (%lu) %s: SPI SRAM memory test fail. %d/%d writes failed, first @ %X
[0m
 [0;32mI (%lu) %s: SPI SRAM memory test OK[0m
 [0;31mE (%lu) %s: PSRAM enabled but initialization failed. Bailing out.[0m
 [0;32mI (%lu) %s: Found %dMB PSRAM device[0m
 [0;32mI (%lu) %s: Speed: %dMHz[0m
 [0;33mW (%lu) %s: Virtual address not enough for PSRAM, map as much as we can. %dMB is mapped[0m
 [0;32mI (%lu) %s: Adding pool of %dK of PSRAM memory to heap allocator[0m
 [0;32mI (%lu) %s: Reserving pool of %dK of internal memory for DMA/internal allocations[0m
 
A fatal error occurred. The crash dump printed below may be used to help
determine what caused it. If you are not already running the most recent
version of MicroPython, consider upgrading. New versions often fix bugs.

To learn more about how to debug and/or report this crash visit the wiki
page at: https://github.com/micropython/micropython/wiki/ESP32-debugging

MPY version : bde21112c-dirty on 2024-10-22
IDF version : v5.2
Machine     : Generic ESP32S3 module with ESP32S3

 esp_init [0;31mE (%lu) %s: can't create event loop: 0x%x
[0m
 mp_task_heap allocation failed! _boot.py main.py MPY: soft reboot
 mp_task NLR jump failed, val=%p
 Timer(%u, mode=%q, period=%lu) bad wake value no resources invalid pin for wake invalid pin 0.0.0.0 .local Warning: lwip.setsockopt() option not implemented
 modsocket [0;31mE (%lu) %s: fcntl set failed %d[0m
 [0;31mE (%lu) %s: fcntl restore failed %d[0m
 [0;32mI (%lu) %s: Initializing[0m
 can't create thread mp_thread buffer too long invalid buffer length invalid handler unknown config param ESPNow.recvinto(): Invalid argument ESPNow.recv(): buffer error function doesn't take keyword arguments function takes %d positional arguments but %d were given function missing %d required positional arguments function expected at most %d arguments, got %d '%q' argument required extra positional arguments given extra keyword arguments given keyword argument(s) not implemented - use normal args instead GC: total: %u, used: %u, free: %u , max new split: %u 
 No. of 1-blocks: %u, 2-blocks: %u, max blk sz: %u, max free sz: %u
 GC memory layout; from %p: 
       (%u lines all free) 
%08x:  true false <%q> Traceback (most recent call last):
   File "%q", line %d , in %q
 can't convert %s to float can't convert %s to complex object '%s' isn't a tuple or list requested length %d but object has length %d %q indices must be integers, not %s %q index out of range Comparison between bytes and str object of type '%s' has no len() '%s' object doesn't support item deletion '%s' object isn't subscriptable '%s' object doesn't support item assignment object with buffer protocol required only slices with step=1 (aka None) are supported lhs and rhs should be compatible array/bytes required on right side memoryview offset too large bytearray(b array('%c' , [ ,  string argument without an encoding True False %sj %sj) can't truncate-divide a complex number complex divide by zero 0.0 to a complex power ([ ]) popitem(): dictionary is empty %q( { dict update sequence has wrong length dict_items dict_keys dict_values [Errno %d] %q <function %q at 0x%p> generator already executing <generator object '%q' at 