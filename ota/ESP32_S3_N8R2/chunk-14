x%08x
 EM_BLE_ADVEXTHDRTXBUF_OFFSET: 0x%08x, EM_BLE_ADVEXTHDRTXBUF_END: 0x%08x
 EM_BLE_ADVDATATXBUF_OFFSET: 0x%08x, EM_BLE_ADVDATATXBUF_END: 0x%08x
 EM_BLE_AUXCONNECTREQTXBUF_OFFSET: 0x%08x, EM_BLE_AUXCONNECTREQTXBUF_END: 0x%08x
 EM_BLE_DATARXBUF_OFFSET: 0x%08x, EM_BLE_DATARXBUF_END: 0x%08x
 EM_BLE_ACLTXBUF_OFFSET: 0x%08x, EM_BLE_ACLTXBUF_END: 0x%08x
 BD_ADDR: %02X:%02X:%02X:%02X:%02X:%02X
 H4TL EIF not registered
 Coex register schm btdm cb faild
 Funcs table create fails
 Config struct mismatch: magic=%08x, ver=%08x
 Hardware Target Code Invalid: 0x%x
 Invalid scan backoff upperlimitmax: 0x%x
 Default Tx Power Invalid: 0x%x
 RWIP Heap alloc: ENV [%p %d], MSG [%p %d], NORET [%p %d], DB [%p %d]
 Uart ENV [%p], VHCI ENV [%p]
 btController clear <reg_force_usecswinsz> for phasematchp reg
 set rfrxtmda2 %d, set rfrxtmda3 %d
 set <reg_force_usecswinsz> for phasematchp reg
 SCHM PROC %02x %02x, %p
 MAGIC %08x VERSION %08x
 HLI Magic mismatch: %08x, %08x
 HLI Version mismatch: %08x, %08x
 intc.c llc_con_upd.c llc_llcp.c llc_phy_upd.c lld_adv.c lld_con.c lld.c RX MAX LENGTH %d
 lld_per_adv.c lld_scan.c lld_test.c llm_adv.c llm_hci.c llm_init.c llm_scan.c nvds.c NVDS MAGIC FAILED
 OSI Magic mismatch: %08x
 OSI Version mismatch: %08x
 %s initialise RF LC Todd
 rf_txpwr.c rwble.c rwip_driver.c sch_plan.c sch_prog.c Send Queue Failed
 vhci.c VHCI: Packet length not supported
 VHCI: Controller is not run
 emi.c EM ET %04x, %p, len %d
 EM CS %04x, %p, len %d
 EM WL/RAL %04x, %p, len %d
 EM RXDESC %04x, %p, len %d
 EM TXDESC %04x, %p, len %d
 EM LLCP TX BUFFER %04x, %p, len %d
 EM ADV EXT HDR TX BUFFER %04x, %p, len %d
 EM ADV DATA TX BUFFER[%d] %04x, NULL, len %d
 EM AUX CONNECT REQ TX BUFFER %04x, %p, len %d
 EM DATA RX BUFFER[%d] %04x, %p, len %d
 EM ACL TX STATIC BUFFER[%d] %04x, %p, len %d
 EM ACL TX DYNAMIC BUFFER[%d] %04x, NULL, len %d
 FINAL EM IDX %d,
 BHH BBL6B ke_task.c CHK: ACT %d, CONN mst %d, intv %d, ce %d, latency %d
 CHK: st %d sleep %d
 UNSLP2
 sdmmc_cmd [0;33mW (%lu) %s: card doesn't support APP_CMD[0m
 [0;31mE (%lu) %s: %s: set_cclk_always_on (1) err=0x%x[0m
 [0;31mE (%lu) %s: %s: set_cclk_always_on (2) err=0x%x[0m
 [0;31mE (%lu) %s: %s: sdmmc_send_cmd returned 0x%x[0m
 [0;31mE (%lu) %s: write sectors dma - timeout[0m
 [0;31mE (%lu) %s: %s: sdmmc_send_cmd_send_status returned 0x%x[0m
 [0;31mE (%lu) %s: %s: write failed, card is locked: r2=0x%04lx[0m
 [0;31mE (%lu) %s: %s: card status indicates an error after write operation: r2=0x%04lx[0m
 [0;31mE (%lu) %s: read sectors dma - timeout[0m
 sdmmc_common [0;31mE (%lu) %s: %s: send_op_cond (1) returned 0x%x[0m
 [0;31mE (%lu) %s: %s: read_ocr returned 0x%x[0m
 [0;31mE (%lu) %s: %s: all_send_cid returned 0x%x[0m
 [0;31mE (%lu) %s: %s: decoding CID failed (0x%x)[0m
 [0;31mE (%lu) %s: %s: send_cid returned 0x%x[0m
 [0;31mE (%lu) %s: %s: set_relative_addr returned 0x%x[0m
 [0;31mE (%lu) %s: %s: send_csd returned 0x%x[0m
 [0;33mW (%lu) %s: %s: SDSC card reports capacity=%u. Limiting to %u.[0m
 [0;31mE (%lu) %s: %s: select_card returned 0x%x[0m
 [0;31mE (%lu) %s: host.set_bus_width failed (0x%x)[0m
 [0;31mE (%lu) %s: failed to switch bus frequency (0x%x)[0m
 [0;31mE (%lu) %s: host.set_input_delay failed (0x%x)[0m
 [0;31mE (%lu) %s: input phase delay feature isn't supported[0m
 [0;31mE (%lu) %s: failed to get real working frequency (0x%x)[0m
 [0;31mE (%lu) %s: host doesn't support DDR mode or voltage switching[0m
 [0;31mE (%lu) %s: failed to switch bus to DDR mode (0x%x)[0m
 [0;33mW (%lu) %s: slot width set to 4, but host flags don't have 4 line mode enabled; using 1 line mode[0m
 sdmmc_io [0;31mE (%lu) %s: %s: unexpected return: 0x%x[0m
 [0;31mE (%lu) %s: %s: sdmmc_io_rw_direct (read SD_IO_CCCR_CARD_CAP) returned 0x%0x[0m
 [0;31mE (%lu) %s: %s: sdmmc_io_rw_direct (write SD_IO_CCCR_BUS_WIDTH) returned 0x%0x[0m
 [0;31mE (%lu) %s: %s: sdmmc_io_send_op_cond (1) returned 0x%x[0m
 sdmmc_mmc [0;31mE (%lu) %s: unknown MMC CSD structure version 0x%x[0m
 [0;31mE (%lu) %s: %s: could not allocate ext_csd[0m
 [0;31mE (%lu) %s