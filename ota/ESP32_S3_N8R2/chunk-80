connect clear tx_buf starting SA query procedure with AP(%02x:%02x:%02x:%02x:%02x:%02x) No response to %d SA Queries, reset connection sending disassoc enable tsf Association refused temporarily, comeback time %lu (TUs) <%s>sta rx csa, newchan=%d, old=%d, csa_count:%d <%s>sta rx csa, unchanged, newchan=%d, old=%d, csa_count:%d <%s>sta rx csa, unchanged, newchan=%d, old=%d, csa_count:%d <from user>sta rx csa, csa (%d->%d) in progress, ignore newchan=%d, csa_count:%d sta rx csa, newchan=%d, old=%d unexpected state: %s -> %s (%x) state: %s -> %s (%x) %s mode switch cause ap destroyed %s mode switch cause ap destroyed %s mode switch cause sta destroyed %s mode switch cause sta destroyed %s mode switch cause sta destroyed %s mode switch cause ap destroyed %s mode switch cause sta destroyed %s mode switch cause sta destroyed %s mode switch cause ap destroyed %s mode switch cause sta destroyed %s mode switch cause sta destroyed sta has disconnected from AP %s mode switch cause sta destroyed sta has disconnected from AP %s mode switch cause sta destroyed %s mode switch cause sta destroyed %s mode switch cause sta destroyed %s mode switch cause sta destroyed %s mode switch cause sta destroyed security: %s, phy: %s, rssi: %d connected with %s, aid = %d, channel %d, %s, bssid = %02x:%02x:%02x:%02x:%02x:%02x start obss scan, interval: %d obss scan timeout: scan begin station: %02x:%02x:%02x:%02x:%02x:%02x join, AID=%d, %s, %s max connection! removing station <%02x:%02x:%02x:%02x:%02x:%02x> after unsuccessful auth/assoc, AID = %d station: %02x:%02x:%02x:%02x:%02x:%02x leave, AID = %d, bss_flags is %d, bss:%p ap_probe_send over, resett wifi status to disassoc bcn_timeout,ap_probe_send_start <connect>csa, newchan=%d, old=%d, csa_count:%d primary chan differ, old=%d, new=%d, start CSA timer switch to channel %d auto reconnect no %s found, reconnect after 1s tx ht2040 coex frame: hdr=%d len=%d chan_num=%d Init max length of beacon: %d/%d Init static tx FG buffer num: %d Init tx cache buffer num: %d Init dynamic tx buffer num: %d Init static tx buffer num: %d Init management short buffer num: %d Init dynamic rx mgmt buffer num: %d Init static rx mgmt buffer num: %d Init data frame dynamic rx buffer num: %d stop sw txq lmac stop hw txq discard flag int: state=%d i=%d Coexist: Wi-Fi connect fail, apply reconnect coex policy
 Coexist!!! Wi-Fi station would only keep waked when available
 Set ps type: %d, coexist: %d
 (mesh)pm stop, sleep:%lld secs, total:%lld secs, current active set:%d, running:%.02f pm stop, total sleep time: %llu us / %llu us
 set rx beacon pti, rx_bcn_pti: %d, bcn_timeout: %d, mt_pti: %d, mt_time: %d pm start, type: %d
 Coexist!!! Wi-Fi station would only keep waked when available
 AP's beacon interval = %u us, DTIM period = %u And use another outer/mobile-hotspot instead. Please report this bug to the manufaturer of the router/mobile-hotspot. The router/mobile-hotspot does not follow Wi-Fi protocol. There is no TIM IE in Beacon frame. And use another outer/mobile-hotspot instead. Please report this bug to the manufaturer of the router/mobile-hotspot. The router/mobile-hotspot does not follow Wi-Fi protocol. Beacon interval IE of Beacon frame is 0. dp: %u, bi: %u, li: %u, scale listen interval from %u us to %u us wifi driver task: %x, prio:%d, stack:%d, core=%d clear rx fragment Ignore BAR free! Deinit lldesc rx mblock:%d Init dynamic rx buffer num: %d Init static rx buffer num: %d Init static rx buffer size: %d ic_disable_sniffer ic_enable_sniffer <ba-del>idx:%d, tid:%d <ba-add>idx:%d (ifx:%d, %02x:%02x:%02x:%02x:%02x:%02x), tid:%d, ssn:%d, winSize:%d invalid rate, need change phy mode to LR invalid rate invalid interface scan is cancle force witi stop TX Q not empty: %d, TXQ_BLOCK=%x deinit: deinit is in progress deinit: init is in progress init: deinit is in progress init: init is in progress init failed to wifi global lock This was attack!!! <%02x:%02x:%02x:%02x:%02x:%02x> responded within %d SA Query attempts. BSS already removed, simply leave... BSS already removed, simply leave... <MESH STA>adjust channel:%d, seco