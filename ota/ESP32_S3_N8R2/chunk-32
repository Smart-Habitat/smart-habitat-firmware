UlRJRklDQVRFLS0tLS0ALS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQBUaGUgY2VydGlmaWNhdGUgdmFsaWRpdHkgaGFzIGV4cGlyZWQAVGhlIGNlcnRpZmljYXRlIGhhcyBiZWVuIHJldm9rZWQgKGlzIG9uIGEgQ1JMKQBUaGUgY2VydGlmaWNhdGUgQ29tbW9uIE5hbWUgKENOKSBkb2VzIG5vdCBtYXRjaCB3aXRoIHRoZSBleHBlY3RlZCBDTgBUaGUgY2VydGlmaWNhdGUgaXMgbm90IGNvcnJlY3RseSBzaWduZWQgYnkgdGhlIHRydXN0ZWQgQ0EAVGhlIENSTCBpcyBub3QgY29ycmVjdGx5IHNpZ25lZCBieSB0aGUgdHJ1c3RlZCBDQQBUaGUgQ1JMIGlzIGV4cGlyZWQAQ2VydGlmaWNhdGUgd2FzIG1pc3NpbmcAQ2VydGlmaWNhdGUgdmVyaWZpY2F0aW9uIHdhcyBza2lwcGVkAE90aGVyIHJlYXNvbiAoY2FuIGJlIHVzZWQgYnkgdmVyaWZ5IGNhbGxiYWNrKQBUaGUgY2VydGlmaWNhdGUgdmFsaWRpdHkgc3RhcnRzIGluIHRoZSBmdXR1cmUAVGhlIENSTCBpcyBmcm9tIHRoZSBmdXR1cmUAVXNhZ2UgZG9lcyBub3QgbWF0Y2ggdGhlIGtleVVzYWdlIGV4dGVuc2lvbgBVc2FnZSBkb2VzIG5vdCBtYXRjaCB0aGUgZXh0ZW5kZWRLZXlVc2FnZSBleHRlbnNpb24AVXNhZ2UgZG9lcyBub3QgbWF0Y2ggdGhlIG5zQ2VydFR5cGUgZXh0ZW5zaW9uAFRoZSBjZXJ0aWZpY2F0ZSBpcyBzaWduZWQgd2l0aCBhbiB1bmFjY2VwdGFibGUgaGFzaC4AVGhlIGNlcnRpZmljYXRlIGlzIHNpZ25lZCB3aXRoIGFuIHVuYWNjZXB0YWJsZSBQSyBhbGcgKGVnIFJTQSB2cyBFQ0RTQSkuAFRoZSBjZXJ0aWZpY2F0ZSBpcyBzaWduZWQgd2l0aCBhbiB1bmFjY2VwdGFibGUga2V5IChlZyBiYWQgY3VydmUsIFJTQSB0b28gc2hvcnQpLgBUaGUgQ1JMIGlzIHNpZ25lZCB3aXRoIGFuIHVuYWNjZXB0YWJsZSBoYXNoLgBUaGUgQ1JMIGlzIHNpZ25lZCB3aXRoIGFuIHVuYWNjZXB0YWJsZSBQSyBhbGcgKGVnIFJTQSB2cyBFQ0RTQSkuAFRoZSBDUkwgaXMgc2lnbmVkIHdpdGggYW4gdW5hY2NlcHRhYmxlIGtleSAoZWcgYmFkIGN1cnZlLCBSU0EgdG9vIHNob3J0KS4AKoZIhvcNAQEIACsGAQUFBwgEAEludmFsaWQgY29leGlzdCBhZGFwdGVyIGZ1bmN0aW9uIG1kNSwgaW50ZXJuYWw6ICVzLCBpZGY6ICVzCgBJbnZhbGlkIGNvZXhpc3QgaTE1NCBldmVudCB0eXBlIGZ1bmN0aW9uIG1kNSwgaW50ZXJuYWw6ICVzLCBpZGY6ICVzCgBjb2V4aXN0IGFkYXB0ZXIgZnVuY3Rpb24gaXMgTlVMTABjb2V4aXN0IGFkYXB0ZXIgZnVuY3Rpb24gdmVyc2lvbiBlcnJvciEgVmVyc2lvbiAleCBpcyBleHBlY3RlZCwgYnV0IGl0IGlzICV4CgBjb2V4aXN0IGFkYXB0ZXIgZnVuY3Rpb24gbWFnaWMgZXJyb3IhIE1hZ2ljICV4IGlzIGV4cGVjdGVkLCBidXQgaXQgaXMgJXgKAGNvZXggZmlybXdhcmUgdmVyc2lvbjogJXMKADA2ZWU1MjcAZGI5MmJhMwBkOTZjMWU1MWYAY29leGlzdCByb20gdmVyc2lvbiAlcwoARSAoJWQpICVzOiBlc3Agbm93IGNyZWF0ZSBtdXRleCBmYWlsIQoASSAoJWQpICVzOiBlc3Agbm93IGFscmVhZHkgaW5pdCEKAEkgKCVkKSAlczogZXNwIG5vdyBhbHJlYWR5IGRlaW5pdCEKAEUgKCVkKSAlczogZXNwIG5vdyBub3QgaW5pdCEKAEUgKCVkKSAlczogTWFsbG9jIHBlZXIgZmFpbAoARSAoJWQpICVzOiBpbnZhbGlkIHBhcmFtZXRlcgoARSAoJWQpICVzOiBpbnZhbGlkIGZvcm1hdCwgbmVlZCBjaGFuZ2UgcGh5IG1vZGUgdG8gTFIKAEUgKCVkKSAlczogaW52YWxpZCBMUiByYXRlLCBuZWVkIGNoYW5nZSByYXRlIHRvIFdJRklfUEhZX1JBVEVfTE9SQV8yNTBLIG9yIFdJRklfUEhZX1JBVEVfTE9SQV81MDBLCgAzZTAwNzZmAEkgKCVkKSAlczogZXNwbm93IHNlbmQgY2IgZWIgaXMgbnVsbAoASSAoJWQpICVzOiBlc3Bub3cgc2VuZCBjYiBlYiBkZXNjIGlzIG51bGwKAEUgKCVkKSAlczogUGVlciBhZGRyIGlzIG51bGwKAEUgKCVkKSAlczogaHcga2V5IGZ1bGwKAEUgKCVkKSAlczogSW5pdCBhZXMgZW5jcnlwdGlvbiBmYWlsIQoARSAoJWQpICVzOiBSZWdpc3RlciBzZW5kIGNhbGwgYmFjayBmYWlsIQoASSAoJWQpICVzOiBlc3Bub3cgW3ZlcnNpb246ICVkLjBdIGluaXQKAG1hbmF0aWNrLmMARSAoJWQpICVzOiAlcyAlZAoASSAoJWQpICVzOiBlc3Bub3cgW3ZlcnNpb246ICVkLjBdIGRlaW5pdAoARSAoJWQpICVzOiBSZWN2IGNhbGwgYmFjayBpcyBOVUxMCgBFICglZCkgJXM6IFNlbmQgY2FsbCBiYWNrIGlzIE5VTEwKAEUgKCVkKSAlczogSW52YWxpZCBhcmd1bWVudCEKAEUgKCVkKSAlczogUGVlciBjaGFubmVsIGlzIG5vdCBlcXVhbCB0byB0aGUgaG9tZSBjaGFubmVsLCBzZW5kIGZhaWwhCgBFICglZCkgJXM6IFBlZXIgYWRkcmVzcyBpcyBOVUxMCgBFICglZCkgJXM6IFBlZXIgaXMgTlVMTAoARSAoJWQpICVzOiBFbmNyeXB0IHBlZXIgaXMgZnVsbAoARSAoJWQpICVzOiBtYWxsb2Mga2V5IGZhaWwKAEUgKCVkKSAlczogUGVlciBhZGRyZXNzIG9yIHBlZXIgaXMgTlVMTAoARSAoJWQpICVzOiBQZWVyIGlzIGZ1bGwKAEUgKCVkKSAlczogRG8gbm90IHN1cHBvcnQgZW5jcnlwdGlvbiBmb3IgbXVsdGljYXN0IGFkZHJlc3MKAEUgKCVkKSAlczogUGVlciBjaGFubmVsIGlzIGludmFsaWQKAEUgKCVkKSAlczogUGVlciBpbnRlcmZhY2UgaXMgaW52YWxpZAoAVyAoJWQpICVzOiBQZWVyIGV4aXN0cy4gUGxlYXNlIGNhbGwgQVBJIGVzcF9ub3dfbW9kX3BlZXIoKSEKAEUgKCVkKSAlczogbWFsbG9jIHBlZXIgZmFpbAoARSAoJWQpICVzOiBzZXQgbG1rIGZhaWwKAEUgKCVkKSAlczogTnVtYmVyIGlzIE5VTEwKAEUgKCVkKSAlczogVmVyc2lvbiBpcyBOVUxMCgBFICglZCkgJXM6IFBNSyBpcyBOVUxMCgBFICglZCkgJXM6IGludmFsaWQgcGh5bW9kZSwgbmVlZCB0byBjaGFuZ2UgcGh5IG1vZGUKAEUgKCVkKSAlczogaW52YWxpZCByYXRlLCBuZWVkIGNoYW5nZSBwaHkgbW9kZSBvciByYXRlCgBFICglZCkgJXM6IGludmFsaWQgcGh5bW9kZSwgbmVlZCBjaGFuZ2UgYmFuZHdpZHRoIHRvIDQwCgBFICglZCkgJXM6IGludmFsaWQgY2hhbmVsIGluZm8sIG5lZWQgY2hhbmdlIHNlY29uZCBjaGFubmVsIHRvIDQwCgBFICglZCkgJXM6IGludmFsaWQgcmF0ZSwgZXJzdSBvbmx5IHN1cHBvcnQgbWNzIDB+MgoARSAoJWQpICVzOiBpbnZhbGlkIHJhdGUsIGRjbSBvbmx5IHN1cHBvcnQgbWNzIDAgMSAzIDQKABj+NABPUyBhZGFwdGVyIGZ1bmN0aW9uIGlzIE5VTEwAT1MgYWRhcHRlciBmdW5jdGlvbiB2ZXJzaW9uIGVycm9yISBWZXJzaW9uICVkIGlzIGV4cGVjdGVkLCBidXQgaXQgaXMgJXgKAE9TIGFkYXB0ZXIgZnVuY3Rpb24gbWFnaWMgZXJyb3IhIE1hZ2ljICVkIGlzIGV4cGVjdGVkLCBidXQgaXQgaXMgJXgKAEludmFsaWQgT1NJIGVzcF93aWZpX29zX2FkYXB0ZXIuaCBtZDUsIGludGVybmFsOiAlcywgaWRmOiAlcwoASW52YWxpZCBXaUZpIGVzcF93aWZpX2NyeXB0b190eXBlcy5oIG1kNSwgaW50ZXJuYWw6ICVzLCBpZGY6ICVzCgBJbnZhbGlkIFdpRmkgZXNwX3dpZmlfdHlwZXMuaCBtZDUsIGludGVybmFsOiAlcywgaWRmOiAlcwoASW52YWxpZCBXaUZpIGVzcF93aWZpLmggbWQ1LCBpbnRlcm5hbDogJXMsIGlkZjogJXMKAEludmFsaWQgV2lGaSBlc3Bfd2lmaV9oZS5oIG1kNSwgaW50ZXJuYWw6ICVzLCBpZGY6ICVzCgBJbnZhbGlkIFdpRmkgZXNwX3dpZmlfaGVfdHlwZXMuaCBtZDUsIGludGVybmFsOiAlcywgaWRmOiAlcwoAbmV0ODAyMTEgcm9tIHZlcnNpb246ICVzCgBjb25maWcgaXMgTlVMTABXSUZJX01FU0hfRVZFTlQAY2E1MTVjNgBhNGZjMWVlADAzNjRkZTkANDdiY2UzNAA5MGEyN2ZiADY2MGRjMWIAcmVzcAAzZTAwNzZmLXJlbW90ZQBpZWVlODAyMTFfY3J5cHRvLmMAJWMgKCVkKSAlczoAaWZ4AGJjbi9wcm9iZQBtZ210AGFtc2R1AGRlYXV0aABhc3NvYwBhcF90eABzdGFfdHgAb29zAHJlb3JkZXIAcHNfdWMxAHBzcV91YwBwc3FfbWMAcHNxX3R4AGllZWU4MDIxMV9ob3N0YXAuYwA0MFUANDBEAGllZWU4MDIxMV9odC5jAGllZWU4MDIxMV9pbnB1dC5jAGdyb3VwIGNpcGhlciBzdWl0ZQBwYWlyd2lzZSBjaXBoZXIgc3VpdGUgY291bnQAcGFpcndpc2UgY2lwaGVyIHN1aXRlAEFLTSBzdWl0ZSBjb3VudABBS00gc3VpdGUAQ2FwAFBNS0lEIGNvdQ==
