LD_INVALID ESP_ERR_MEMPROT_AREA_INVALID ESP_ERR_MEMPROT_CPUID_INVALID ETSTimer sys_evt [0;33mW (%lu) %s: handler already registered, overwriting[0m
 [0;31mE (%lu) %s: alloc for new id node failed[0m
 [0;31mE (%lu) %s: alloc mem for new base node failed[0m
 [0;31mE (%lu) %s: event_loop_args was NULL[0m
 [0;31mE (%lu) %s: event_loop was NULL[0m
 [0;31mE (%lu) %s: alloc for event loop failed[0m
 [0;31mE (%lu) %s: create event loop queue failed[0m
 [0;31mE (%lu) %s: create event loop mutex failed[0m
 [0;31mE (%lu) %s: create task for loop failed[0m
 [0;31mE (%lu) %s: suspended task for loop %p[0m
 [0;31mE (%lu) %s: registering to any event base with specific id unsupported[0m
 [0;31mE (%lu) %s: alloc for new loop node failed[0m
 [0;31mE (%lu) %s: unregistering to any event base with specific id unsupported[0m
 phy_init [0;31mE (%lu) %s: %s: NVS has not been initialized. Call nvs_flash_init before starting WiFi/BT.[0m
 cal_version cal_mac [0;31mE (%lu) %s: %s: calibration data MAC check failed: expected %02x:%02x:%02x:%02x:%02x:%02x, found %02x:%02x:%02x:%02x:%02x:%02x[0m
 cal_data [0;31mE (%lu) %s: %s: failed to get cal_data(0x%x)[0m
 [0;31mE (%lu) %s: %s: store calibration data failed(0x%x)[0m
 [0;31mE (%lu) %s: %s: store calibration mac failed(0x%x)[0m
 [0;31mE (%lu) %s: %s: store calibration version failed(0x%x)[0m
 [0;31mE (%lu) %s: %s: store calibration nvs commit failed(0x%x)[0m
 [0;32mI (%lu) %s: phy_version %s[0m
 [0;31mE (%lu) %s: failed to allocate memory for RF calibration data[0m
 [0;33mW (%lu) %s: failed to load RF calibration data (0x%x), falling back to full calibration[0m
 [0;33mW (%lu) %s: saving new calibration data because of checksum failure, mode(%d)[0m
 phy-track-pll-timer tiT localhost ::FFFF: Discarded non-LCP packet when LCP not open discarding proto 0x%x in phase %d User request PAP authentication failed due to protocol-reject No response to PAP authenticate-requests Remote message: %0.*v PAP authentication failed <NULL> %d.%d.%d.%d IPV6_MULTICAST_HOPS lwip_arch [0;31mE (%lu) %s: sys_init: failed to init lwip protect mutex[0m
 [0;31mE (%lu) %s: thread_sem_init: out of memory[0m
 Connection terminated. LCP down No network protocols running Failed to authenticate ourselves to peer auth_withpeer_success: unknown protocol %x %s authentication succeeded Secret for %s on %s is too long CHAP authentication failed due to protocol-reject No CHAP secret found for authenticating us to %q CHAP authentication succeeded CHAP authentication failed %s: %.*v CHAP: authentication with peer already started! CHAP digest 0x%x requested but not available Peer refused to agree to our IP address Refused our IP address Could not determine local IP address Could not determine remote IP address: defaulting to %I Peer is not authorized to use remote address %I Unauthorized remote IP address Interface configuration failed local  IP address %I remote IP address %I primary   DNS address %I secondary DNS address %I IPCP Could not determine remote LL address Could not determine local LL address local and remote LL addresses are equal fe80::%02x%02x:%02x%02x:%02x%02x:%02x%02x local  LL address %s remote LL address %s IPV6CP Bug in lcp_addci: wrong length Received Protocol-Reject for LCP! No auth is possible No response to %d echo-requests Serial link appears to be disconnected. Peer not responding assertion lcp_echo_timer_running==0 failed Serial line is looped back. Loopback detected Protocol-Reject for 0x%x received Protocol-Reject for unsupported protocol 0x%x lcp: received short Echo-Reply, length %d appear to have received our own echo-reply! LCP %s: timeout sending Config-Requests Received bad configure-ack: %P Received bad configure-nak: %P Received bad configure-rej: %P %s terminated by peer (%0.*v) %s terminated by peer %s: Rcvd Code-Reject for code %d, id %d IP_EVENT PPP_DEF sta esp_netif_lwip [0;32mI (%lu) %s: DHCP server assigned IP to a client, IP is: %d.%d.%d.%d[0m
 [0;31mE (%lu) %s: dhcps cb: failed to post IP_EVENT_AP_STAIPASSIGNED (%x)[0m
 [0;31mE (%lu) %s: ip